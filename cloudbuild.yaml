steps:
  # Step 1: Check if the cluster exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud container clusters describe my-cluster --zone us-central1-a --project $PROJECT_ID; then
          echo "Cluster does not exist. Creating cluster."
          gcloud container clusters create my-cluster \
              --zone us-central1-a \
              --num-nodes 3 \
              --enable-autoscaling --min-nodes=1 --max-nodes=5 \
              --scopes "https://www.googleapis.com/auth/cloud-platform"
        else
          echo "Cluster exists. Proceeding with deployment."
        fi

  # Step 2: Configure kubectl to use the cluster
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials my-cluster --zone us-central1-a --project $PROJECT_ID

  # Step 3: Create the namespaces if they don't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl get namespace dev || kubectl create namespace dev
        kubectl get namespace prod || kubectl create namespace prod

  # Step 4: Build the Docker image using Cloud Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/text-generator:latest', '.']

  # Step 5: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/text-generator:latest']

  # Step 6: Deploy to dev environment using Skaffold
  - name: 'gcr.io/k8s-skaffold/skaffold:v2.13.1'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        skaffold deploy -p dev --default-repo=gcr.io/$PROJECT_ID

  # Step 7: Generate a valid release name for dev
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BUILD_ID_SANITIZED=$(echo $BUILD_ID | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
        echo "text-generator-release-dev-${BUILD_ID_SANITIZED}" > /workspace/dev_release_name.txt

  # Step 8: Create a release in Cloud Deploy for dev
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DEV_RELEASE_NAME=$(cat /workspace/dev_release_name.txt)
        gcloud deploy releases create $DEV_RELEASE_NAME \
        --delivery-pipeline=text-generator-pipeline \
        --region=us-central1 \
        --images=gcr.io/$PROJECT_ID/text-generator=gcr.io/$PROJECT_ID/text-generator:latest \
        --targets=dev

  # Step 9: Deploy to non-prod environment using Skaffold
  - name: 'gcr.io/k8s-skaffold/skaffold:v2.13.1'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        skaffold deploy -p non-prod --default-repo=gcr.io/$PROJECT_ID

  # Step 10: Generate a valid release name for non-prod
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BUILD_ID_SANITIZED=$(echo $BUILD_ID | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-')
        echo "text-generator-release-non-prod-${BUILD_ID_SANITIZED}" > /workspace/non_prod_release_name.txt

  # Step 11: Create a release in Cloud Deploy for non-prod
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        NON_PROD_RELEASE_NAME=$(cat /workspace/non_prod_release_name.txt)
        gcloud deploy releases create $NON_PROD_RELEASE_NAME \
        --delivery-pipeline=text-generator-pipeline \
        --region=us-central1 \
        --images=gcr.io/$PROJECT_ID/text-generator=gcr.io/$PROJECT_ID/text-generator:latest \
        --targets=non-prod

images:
  - 'gcr.io/$PROJECT_ID/text-generator:latest'
options:
  logging: CLOUD_LOGGING_ONLY
timeout: "1200s"
serviceAccount: "cloudbuild-sa@kunal-ica1.iam.gserviceaccount.com"
substitutions:
  _PROJECT_ID: "kunal-ica1"
